p(
tags$strong('Adaptado de: '),
'Byon W, Smith MK, Chan P, Tortorici MA, Riley S, Dai H, et al. Establishing best practices and guidance in population modeling: An experience with an internal population pharmacokinetic analysis guidance. ',
tags$i('CPT Pharmacometrics Syst Pharmacol'),
' 2013;2(7):1–8.',
style = "font-size:small;"
)
)
# Chunk 4: PerfilPlasmatico1
tags$div(
img(
src = normalizePath(file.path('figures', '002_perfil_plasmatico.png')),
width = '72%',
alt = 'Esquema de la definición de principales índice PK/PD'
),
p(class = 'caption', 'Figura xx. Esquema de la definición de principales índice PK/PD')
)
# Chunk 5: PerfilPlasmatico2
tags$div(class = 'row',
tags$div(class = 'column', width = "40%", img(src = normalizePath(
file.path('figures', '003_PTA_1.png')
)),
p(class='caption', 'Figura xx. \\(\\mathrm{PTA_{50}}\\) vs \\(\\mathrm{MIC}\\) con umbral del 90\\%')
),
tags$div(class = 'column', width = "40%", img(src = normalizePath(
file.path('figures', '004_PTA_2.png')
)),
p(class='caption', 'Figura xx. \\(_{f}\\mathrm{T_{>MIC}}\\) vs \\(\\mathrm{MIC}\\) con línea segmentada en objetivo')
), )
# Chunk 6: ComparacionPredicciones
tags$div(
style = "width: 96%; align-self: center; align-content: center; text-align: center; margin: auto; padding-left: 5%; padding-right: 5%;",
id = 'ComparacionPredicciones',
#
readRDS(file.path('figures', '001_prediccicionesComparacion.rds')),
p(class = 'caption', 'Figura xx. Comparación de predicciones individuales y poblacionales')
)
# Chunk 7: ComparacionResiduales
tags$div(
style = "width: 96%; align-self: center; align-content: center; text-align: center; margin: auto; padding-left: 5%; padding-right: 5%;",
id = "ComparacionResiduales",
#
readRDS(file.path('figures', '010_residualesComparacion.rds')),
p(class = 'caption',
'Figura xx. Gráficos de residuales (IWRES, NPDE o PWRES) comparados con tiempo o C',
tags$sub('PRED'),
'.')
)
# Chunk 8: FEP-ModeloFinal
tags$div(
p(class = 'caption', 'Tabla xx. Parámetros estimados para modelo final de cefepime'),
img(
src = normalizePath(file.path(fig, '225_FEP_modeloFinal.png')),
width = '65%',
alt = 'Parámetros estimados para modelo final de cefepime'
)
)
# Chunk 9: FEP-FinalGOF
cap <- 'Gráficos diagnósticos de bondad de ajuste para el modelo con covariable. (A) observaciones (OBS) vs predicciones poblacionales (PRED), (B) OBS vs predicciones individuales (IPRED), (C) OBS vs PRED en escala logarítmica, y (D) OBS vs IPRED en escala logarítmica.'
tags$div(
img(
src = normalizePath(file.path(fig, '227_FEP_GraficosGOF.png')),
width = '70%', alt = cap
),
p(class = 'caption', paste0('Figura xx. ', cap))
)
# Chunk 10: FEP-FinalResiduales
cap <- 'Gráfico de dispersión de residuales para modelo con covariable. (A) PWRES vs TAD, (b) PWRES vs PRED, (c) IWRES vs TAD, (D) IWRES vs PRED, (E) NPDE vs TAD, y (F) NPDE vs PRED.'
tags$div(
img(
src = normalizePath(file.path(fig, '228_FEP_GraficosResiduales.png')),
width = '70%', alt = cap
),
p(class = 'caption', paste0('Figura xx. ', cap))
)
# Chunk 11: FEP-pcVPC
tags$div(
img(
src = normalizePath(file.path(fig, '226_FEP_pcVPC.png')),
width = '80%',
alt = 'Gráficos diagnósticos basados en simulación para modelo final de FEP'
),
p(class = 'caption', 'Figura xx. Gráficos diagnósticos basados en simulación para modelo final de FEP. (A) Chequeo predictivo visual corregido por predicción (pcVPC). (B) Chequeo predictivo numérico (NPC).')
)
# Chunk 12: FEP-PerfilSimulado
cap <- 'Predicción del modelo para 12 regímenes de dosificación con dosis diarias totales de: 2g, 4g y 6g, en las filas, y diferentes ventanas de tiempo en las columnas, fases inicial (INI) y de estado estacionario (SS)'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '236_FEP_RegimenesSimulados.png')),
width = '50%', alt = cap )
)
# Chunk 13: FEP-PTA-1
cap <- 'PTA de 100%fT>MIC para los 12 regímenes de dosificación simulados.'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '234_FEP_PTA_Indicador_100.png')),
width = '50%', alt = cap )
)
# Chunk 14: FEP-PTA-2
cap <- 'PTA de 60%fT>MIC para los 12 regímenes de dosificación simulados.'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '235_FEP_PTA_Indicador_50.png')),
width = '50%', alt = cap )
)
# Chunk 15: FEP-CFR-1
cap <- 'CFR para varios regímenes de dosificación de FEP en estado estacionario frente a distribuciones EUCAST de varios microorganismos'
tags$div(
p(class = 'caption', paste0('Tabla xx. ', cap)),
img(
src = normalizePath(file.path(fig, '230_FEP_CFR_EUCAST.png')),
width = '72%', alt = cap )
)
# Chunk 16: FEP-CFR-2
cap <- 'Comparación de CFR de cefepime en el tratamiento empírico y el tratamiento dirigido para tres microorganismos.'
tags$div(
p(class = 'caption', paste0('Tabla xx. ', cap)),
img(
src = normalizePath(file.path(fig, '231_FEP_CFR_Tratamiento_Empirico.png')),
width = '70%', alt = cap )
)
# Chunk 17: FEP-PTA-SCR
cap <- 'PTA vs MIC para diferentes niveles de creatinina sérica, para una dosis de 2g q8h en infusión de 30 minutos'
tags$div(
img(
src = normalizePath(file.path(fig, '232_FEP_PTA_eGFR.png')),
width = '70%', alt = cap ),
p(class = 'caption', paste0('Figura xx. ', cap))
)
fig
# Chunk 1: setup
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
# Chunk 2: slide-number-on
.remark-slide-number {
display: inline;
}
# Chunk 3: procesoModelamiento
tags$div(
img(
src = normalizePath(file.path('figures', '011_procesoModelamiento.png')),
width = '70%',
alt = 'Figura 1. Proceso de modelamiento '
),
p(class = 'caption', 'Figura 1. Proceso de modelamiento de farmacocinética poblacional.'),
p(
tags$strong('Adaptado de: '),
'Byon W, Smith MK, Chan P, Tortorici MA, Riley S, Dai H, et al. Establishing best practices and guidance in population modeling: An experience with an internal population pharmacokinetic analysis guidance. ',
tags$i('CPT Pharmacometrics Syst Pharmacol'),
' 2013;2(7):1–8.',
style = "font-size:small;"
)
)
# Chunk 4: PerfilPlasmatico1
tags$div(
img(
src = normalizePath(file.path('figures', '002_perfil_plasmatico.png')),
width = '72%',
alt = 'Esquema de la definición de principales índice PK/PD'
),
p(class = 'caption', 'Figura xx. Esquema de la definición de principales índice PK/PD')
)
# Chunk 5: PerfilPlasmatico2
tags$div(class = 'row',
tags$div(class = 'column', width = "40%", img(src = normalizePath(
file.path('figures', '003_PTA_1.png')
)),
p(class='caption', 'Figura xx. \\(\\mathrm{PTA_{50}}\\) vs \\(\\mathrm{MIC}\\) con umbral del 90\\%')
),
tags$div(class = 'column', width = "40%", img(src = normalizePath(
file.path('figures', '004_PTA_2.png')
)),
p(class='caption', 'Figura xx. \\(_{f}\\mathrm{T_{>MIC}}\\) vs \\(\\mathrm{MIC}\\) con línea segmentada en objetivo')
), )
# Chunk 6: ComparacionPredicciones
tags$div(
style = "width: 96%; align-self: center; align-content: center; text-align: center; margin: auto; padding-left: 5%; padding-right: 5%;",
id = 'ComparacionPredicciones',
#
readRDS(file.path('figures', '001_prediccicionesComparacion.rds')),
p(class = 'caption', 'Figura xx. Comparación de predicciones individuales y poblacionales')
)
# Chunk 7: ComparacionResiduales
tags$div(
style = "width: 96%; align-self: center; align-content: center; text-align: center; margin: auto; padding-left: 5%; padding-right: 5%;",
id = "ComparacionResiduales",
#
readRDS(file.path('figures', '010_residualesComparacion.rds')),
p(class = 'caption',
'Figura xx. Gráficos de residuales (IWRES, NPDE o PWRES) comparados con tiempo o C',
tags$sub('PRED'),
'.')
)
# Chunk 8: FEP-ModeloFinal
tags$div(
p(class = 'caption', 'Tabla xx. Parámetros estimados para modelo final de cefepime'),
img(
src = normalizePath(file.path(fig, '225_FEP_modeloFinal.png')),
width = '65%',
alt = 'Parámetros estimados para modelo final de cefepime'
)
)
# Chunk 9: FEP-FinalGOF
cap <- 'Gráficos diagnósticos de bondad de ajuste para el modelo con covariable. (A) observaciones (OBS) vs predicciones poblacionales (PRED), (B) OBS vs predicciones individuales (IPRED), (C) OBS vs PRED en escala logarítmica, y (D) OBS vs IPRED en escala logarítmica.'
tags$div(
img(
src = normalizePath(file.path(fig, '227_FEP_GraficosGOF.png')),
width = '70%', alt = cap
),
p(class = 'caption', paste0('Figura xx. ', cap))
)
# Chunk 10: FEP-FinalResiduales
cap <- 'Gráfico de dispersión de residuales para modelo con covariable. (A) PWRES vs TAD, (b) PWRES vs PRED, (c) IWRES vs TAD, (D) IWRES vs PRED, (E) NPDE vs TAD, y (F) NPDE vs PRED.'
tags$div(
img(
src = normalizePath(file.path(fig, '228_FEP_GraficosResiduales.png')),
width = '70%', alt = cap
),
p(class = 'caption', paste0('Figura xx. ', cap))
)
# Chunk 11: FEP-pcVPC
tags$div(
img(
src = normalizePath(file.path(fig, '226_FEP_pcVPC.png')),
width = '80%',
alt = 'Gráficos diagnósticos basados en simulación para modelo final de FEP'
),
p(class = 'caption', 'Figura xx. Gráficos diagnósticos basados en simulación para modelo final de FEP. (A) Chequeo predictivo visual corregido por predicción (pcVPC). (B) Chequeo predictivo numérico (NPC).')
)
# Chunk 12: FEP-PerfilSimulado
cap <- 'Predicción del modelo para 12 regímenes de dosificación con dosis diarias totales de: 2g, 4g y 6g, en las filas, y diferentes ventanas de tiempo en las columnas, fases inicial (INI) y de estado estacionario (SS)'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '236_FEP_RegimenesSimulados.png')),
width = '50%', alt = cap )
)
# Chunk 13: FEP-PTA-1
cap <- 'PTA de 100%fT>MIC para los 12 regímenes de dosificación simulados.'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '234_FEP_PTA_Indicador_100.png')),
width = '50%', alt = cap )
)
# Chunk 14: FEP-PTA-2
cap <- 'PTA de 60%fT>MIC para los 12 regímenes de dosificación simulados.'
tags$div(
p(class = 'caption', paste0('Figura xx. ', cap)),
img(
src = normalizePath(file.path(fig, '235_FEP_PTA_Indicador_50.png')),
width = '50%', alt = cap )
)
# Chunk 15: FEP-CFR-1
cap <- 'CFR para varios regímenes de dosificación de FEP en estado estacionario frente a distribuciones EUCAST de varios microorganismos'
tags$div(
p(class = 'caption', paste0('Tabla xx. ', cap)),
img(
src = normalizePath(file.path(fig, '230_FEP_CFR_EUCAST.png')),
width = '72%', alt = cap )
)
# Chunk 16: FEP-CFR-2
cap <- 'Comparación de CFR de cefepime en el tratamiento empírico y el tratamiento dirigido para tres microorganismos.'
tags$div(
p(class = 'caption', paste0('Tabla xx. ', cap)),
img(
src = normalizePath(file.path(fig, '231_FEP_CFR_Tratamiento_Empirico.png')),
width = '70%', alt = cap )
)
# Chunk 17: FEP-PTA-SCR
cap <- 'PTA vs MIC para diferentes niveles de creatinina sérica, para una dosis de 2g q8h en infusión de 30 minutos'
tags$div(
img(
src = normalizePath(file.path(fig, '232_FEP_PTA_eGFR.png')),
width = '70%', alt = cap ),
p(class = 'caption', paste0('Figura xx. ', cap))
)
# Chunk 18: VAN-ModeloFinal
tags$div(
p(class = 'caption', 'Tabla xx. Parámetros estimados para modelo final de vancomicina'),
knitr::include_graphics(file.path(van, '001_y_G_GOF.pdf'))
)
knitr::include_graphics(file.path(van, '001_y_G_GOF.pdf'))
van
van
knitr::include_graphics(file.path(van, '001_y_G_GOF.pdf'))>x
knitr::include_graphics(file.path(van, '001_y_G_GOF.pdf'))->x
x
x %>% str()
knitr::include_graphics(file.path(van, '001_y_G_GOF.pdf'))
# Chunk 1: setup
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
# Chunk 2: slide-number-on
.remark-slide-number {
display: inline;
}
.container{
display: flex;
}
.col{
flex: 1;
}
# Chunk 1: setup
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
# Chunk 2: slide-number-on
.remark-slide-number {
display: inline;
}
.container{
display: flex;
}
.col{
flex: 1;
}
# Chunk 1: setup
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
# Chunk 2: slide-number-on
.remark-slide-number {
display: inline;
}
.container{
display: flex;
}
.col{
flex: 1;
}
# Chunk 1: setup
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
# Chunk 2: slide-number-on
.remark-slide-number {
display: inline;
}
.container{
display: flex;
}
.col{
flex: 1;
}
.remark-slide-number {
display: inline;
}
.container{
display: flex;
}
.col{
flex: 1;
}
require(knitr)
require(htmltools)
require(tidyverse)
require(plotly)
suppressMessages(library(dplyr))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
fig <- file.path('figures')
van <- file.path('figures', 'VAN')
# knitr::raw_html(
# '<script type="text/x-mathjax-config">
#   MathJax.Hub.Config({
#     tex2jax: {
#       inlineMath: [ ["$","$"], ["\\(","\\)"] ],
#       processEscapes: true
#     }
#   });
# </script>'
# )
tags
require(plotly)
readRDS(file.path(van, '002_perfilCompuestoSIM.rds'))
van <- file.path('figures', 'VAN')
fep <- file.path('figures', 'FEP')
readRDS(file.path(van, '002_perfilCompuestoSIM.rds'))
pickle.load(open("./figures/VAN/011_superficiePTA_dosis_MIC.pickle"))
reticulate::repl_python()
import pickle
import plotly.graph_objects as go
pickle.load(open("./figures/VAN/011_superficiePTA_dosis_MIC.pickle"))
pickle.load(open("./figures/VAN/011_superficiePTA_dosis_MIC.pickle", 'rb'))
import pickle
import plotly.graph_objects as go
fig = pickle.load(open("./figures/VAN/011_superficiePTA_dosis_MIC.pickle", 'rb'))
fig.show()
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle")
def crearFiguras(ruta):
fig = pickle.load(open(ruta, 'rb'))
fig.update_layout(title = "", overwrite=True)
return fig
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle")
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle").show()
import pickle
import plotly.graph_objects as go
fig = pickle.load(open("./figures/VAN/011_superficiePTA_dosis_MIC.pickle", 'rb'))
fig.show()
fig.update_layout(title = "", overwrite=True)
import pickle
import plotly.graph_objects as go
def crearFiguras(ruta):
fig = pickle.load(open(ruta, 'rb'))
fig.update_traces(surface = {'colorscale': 'Spectral'}, overwrite=True)
fig.update_layout(title = "", overwrite=True)
return fig
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle").show(config = {'displayModeBar': False}, width = 1000, height = 800)
import pickle
import plotly.graph_objects as go
def crearFiguras(ruta):
fig = pickle.load(open(ruta, 'rb'))
fig.update_traces(surface = {'colorscale': 'Spectral'}, overwrite=True)
fig.update_layout(title = "", overwrite=True)
return fig
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle").show(config = {'displayModeBar': False}, width = 1000, height = 800)
import pickle
import plotly.graph_objects as go
def crearFiguras(ruta):
fig = pickle.load(open(ruta, 'rb'))
# fig.update_traces(surface = {'colorscale': 'Spectral'}, overwrite=True)
fig.update_traces(colorscale="Spectral", selector=dict(type='surface'), overwrite=True)
fig.update_layout(title = "", overwrite=True)
return fig
crearFiguras("./figures/VAN/011_superficiePTA_dosis_MIC.pickle").show(config = {'displayModeBar': False}, width = 1000, height = 800)
100-65
